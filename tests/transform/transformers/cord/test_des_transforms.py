import unittest

from transform.transformers.cord.des.des_transformer import perform_transform
from transform.transformers.cord.des.des_transforms import transformations


class TestAcasTransforms(unittest.TestCase):

    def test_perform_transforms(self):
        response_data = {
            "022": "46",
            "356": "Yes, the business uses a fixed broadband connection",
            "277": "2Mbps or more, but less than 10Mbps",
            "452": "No, the internet speed is not sufficient for our needs",
            "601": "Own website",
            "605": "Yes, the business used digital marketing strategies to improve traffic to its website or app",
            "607": "Yes, the business made e-commerce sales",
            "608": "78000",
            "800": "UK",
            "637": "Africa",
            "639": "Asia",
            "801": "10000",
            "643": "20000",
            "644": "40000",
            "645": "8000",
            "646": "0",
            "647": "0",
            "648": "0",
            "649": "Private consumers",
            "652": "60000",
            "653": "4000",
            "654": "4000",
            "655": "Sales of goods",
            "658": "61000",
            "803": "7000",
            "804": "3500",
            "661": "Sales via your own website or app",
            "663": "Sales via an online marketplace",
            "664": "Sales via EDI",
            "666": "30000",
            "667": "30000",
            "668": "4000",
            "669": "4000",
            "670": "0",
            "677": "Changes to your account or product listings by the platform",
            "681": "Difficulties with information exchange",
            "683": "Issues relating to the terms and conditions between the platform and your business",
            "686": "No, the business did not make e-commerce purchases",
            "810": "50123",
            "811": "21234",
            "812": "4321",
            "813": "5432",
            "753": "No, the business did not provide a digital intermediary platform service",
            "760": "No, the business did not pay a digital intermediary platform to sell our goods and services",
            "764": "Business does not use any of this software",
            "765": "9050",
            "766": "9000",
            "767": "1",
            "768": "2",
            "769": "47",
            "364": "Customer Relationship Management (CRM) software",
            "359": "Email",
            "360": "Office software",
            "362": "Storage of files",
            "770": "My Other Cloud Computing",
            "791": "No additional actions required",
            "797": "Business did not experience any difficulties",
            "483": "Encryption techniques for data, documents or email",
            "486": "ICT risk assessment",
            "500": "Excellent survey!"
        }
        actual = perform_transform(response_data, transformations)

        expected = {
            '022': '46',
            '356': '10',
            '277': '0',
            '278': '1',
            '279': '0',
            '280': '0',
            '497': '0',
            '498': '0',
            '499': '0',
            '452': '01',
            '600': '0',
            '601': '1',
            '602': '0',
            '603': '0',
            '604': '0',
            '605': '10',
            '607': '10',
            '608': '78',
            '800': '1',
            '635': '0',
            '636': '0',
            '637': '1',
            '638': '0',
            '639': '1',
            '640': '0',
            '801': '10',
            '643': '20',
            '644': '40',
            '645': '8',
            '646': '0',
            '647': '0',
            '648': '0',
            '649': '1',
            '650': '0',
            '651': '0',
            '652': '60',
            '653': '4',
            '654': '4',
            '655': '1',
            '802': '0',
            '658': '61',
            '803': '7',
            '804': '3.5',
            '661': '1',
            '662': '0',
            '663': '1',
            '664': '1',
            '665': '0',
            '666': '30',
            '667': '30',
            '668': '4',
            '669': '4',
            '670': '0',
            '671': '0',
            '672': '0',
            '673': '0',
            '674': '0',
            '675': '0',
            '676': '0',
            '677': '1',
            '680': '0',
            '681': '1',
            '678': '0',
            '683': '1',
            '679': '0',
            '682': '0',
            '684': '0',
            '685': '0',
            '686': '01',
            '687': '',
            '805': '0',
            '704': '0',
            '705': '0',
            '706': '0',
            '707': '0',
            '708': '0',
            '709': '0',
            '806': '',
            '712': '',
            '713': '',
            '714': '',
            '715': '',
            '716': '',
            '717': '',
            '718': '0',
            '719': '0',
            '720': '0',
            '721': '',
            '722': '',
            '723': '',
            '724': '0',
            '807': '0',
            '727': '',
            '808': '',
            '809': '',
            '730': '0',
            '731': '0',
            '732': '',
            '733': '',
            '810': '50.123',
            '811': '21.234',
            '812': '4.321',
            '813': '5.432',
            '753': '01',
            '814': '',
            '754': '',
            '755': '',
            '815': '',
            '756': '',
            '757': '',
            '816': '',
            '758': '',
            '759': '',
            '817': '',
            '760': '01',
            '761': '',
            '762': '0',
            '763': '0',
            '190': '0',
            '764': '1',
            '765': '9.05',
            '766': '9',
            '767': '0.001',
            '768': '0.002',
            '769': '0.047',
            '365': '0',
            '364': '1',
            '359': '1',
            '363': '0',
            '361': '0',
            '360': '1',
            '362': '1',
            '770': '1',
            '771': '0',
            '786': '0',
            '787': '0',
            '788': '0',
            '789': '0',
            '790': '0',
            '791': '1',
            '792': '0',
            '793': '0',
            '794': '0',
            '795': '0',
            '796': '0',
            '797': '1',
            '484': '0',
            '483': '1',
            '486': '1',
            '487': '0',
            '481': '0',
            '275': '0',
            '274': '0',
            '272': '0',
            '482': '0',
            '485': '0',
            '798': '0',
            '500': '1',
        }

        self.assertEqual(expected, actual)
